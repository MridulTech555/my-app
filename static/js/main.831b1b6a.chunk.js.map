{"version":3,"sources":["CheckAllComponent.js","App.js","serviceWorker.js","index.js"],"names":["initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","CheckAllComponent","title","options","childRef","useState","indeterminate","setIndeterminate","checkAll","setCheckAll","value","setValue","item","setItem","dragAndDrop","setDragAndDrop","onDragStart","event","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","onDragOver","preventDefault","newList","itemDragged","remainingItems","filter","index","slice","onDrop","onDragLeave","Checkbox","checked","onChange","nextValue","console","log","CheckboxGroup","inline","name","length","map","key","data-position","draggable","className","App","childRef1","useRef","childRef2","onClick","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.831b1b6a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, CheckboxGroup } from 'rsuite';\nimport './App.css';\n\nconst initialDnDState = {\n  draggedFrom: null,\n  draggedTo: null,\n  isDragging: false,\n  originalOrder: [],\n  updatedOrder: []\n }\n\nfunction CheckAllComponent({ title, options, childRef }) {\n\n  const [indeterminate, setIndeterminate] = useState(false);\n  const [checkAll, setCheckAll] = useState(false);\n  const [value, setValue] = useState();\n  const [item, setItem] = useState(options);\n\n  const [dragAndDrop, setDragAndDrop] = useState(initialDnDState);\n\n  const handleCheckAll = (value, checked) => {\n    const nextValue = checked ? options : [];\n    console.log(nextValue, 'handleCheckAll');\n    setValue(nextValue);\n    setCheckAll(checked);\n    setIndeterminate(false);\n  }\n\n  const handleChange = (value) => {\n    console.log(value, 'handleChange');\n    setValue(value);\n    setCheckAll(value.length === options.length);\n    setIndeterminate(value.length > 0 && value.length < options.length);\n  }\n\n // onDragStart fires when an element\n // starts being dragged\n const onDragStart = (event) => {\n  const initialPosition = Number(event.currentTarget.dataset.position);\n  \n  setDragAndDrop({\n   ...dragAndDrop,\n   draggedFrom: initialPosition,\n   isDragging: true,\n   originalOrder: item\n  });\n  \n  \n  // Note: this is only for Firefox.\n  // Without it, the DnD won't work.\n  // But we are not using it.\n  event.dataTransfer.setData(\"text/html\", '');\n }\n\n // onDragOver fires when an element being dragged\n // enters a droppable area.\n // In this case, any of the items on the list\n const onDragOver = (event) => {\n  \n  // in order for the onDrop\n  // event to fire, we have\n  // to cancel out this one\n  event.preventDefault();\n  \n  let newList = dragAndDrop.originalOrder;\n \n  // index of the item being dragged\n  const draggedFrom = dragAndDrop.draggedFrom; \n\n  // index of the droppable area being hovered\n  const draggedTo = Number(event.currentTarget.dataset.position); \n\n  const itemDragged = newList[draggedFrom];\n  const remainingItems = newList.filter((item, index) => index !== draggedFrom);\n\n   newList = [\n    ...remainingItems.slice(0, draggedTo),\n    itemDragged,\n    ...remainingItems.slice(draggedTo)\n   ];\n    \n  if (draggedTo !== dragAndDrop.draggedTo){\n   setDragAndDrop({\n    ...dragAndDrop,\n    updatedOrder: newList,\n    draggedTo: draggedTo\n   })\n  }\n\n }\n\n \n const onDrop = (event) => {\n  \n  setItem(dragAndDrop.updatedOrder);\n  \n  setDragAndDrop({\n   ...dragAndDrop,\n   draggedFrom: null,\n   draggedTo: null,\n   isDragging: false\n  });\n }\n\n\n const onDragLeave = () => {\n  setDragAndDrop({\n  ...dragAndDrop,\n  draggedTo: null\n });\n \n}\n\n    return (\n      <div>\n        <Checkbox\n          indeterminate={indeterminate}\n          checked={checkAll}\n          onChange={handleCheckAll}\n        >\n          <b>{title}</b>\n        </Checkbox>\n        <CheckboxGroup inline name=\"checkboxList\" value={value} onChange={handleChange}>\n        <ul>\n          { item.map( (item, index) => (\n            <li\n            key={index} \n            data-position={index} \n            draggable='true' \n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n            \n            onDragLeave={onDragLeave}\n            className={`dragableList ${dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"dropArea\" : \"\"}`}\n            >\n              <div><Checkbox value={item}> {item} </Checkbox></div>\n              <div className=\"drag\">=</div>\n            </li>\n          ))}\n        </ul>\n        </CheckboxGroup>\n      </div>\n    );\n\n}\n\nCheckAllComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  childRef: PropTypes.object.isRequired,\n};\n\nexport default CheckAllComponent;","import React, { useRef }  from 'react';\nimport CheckAllList from './CheckAllComponent';\nimport './App.css';\n\n\nfunction App () {\n  const childRef1 = useRef(null);\n  const childRef2 = useRef(null);\n\n  const submitForm = () => {\n    alert('Your submit code goes here');\n  } \n\n    return (\n      <div className=\"boxWrapper\">\n        <div className=\"contentWrapper\">\n          <div><CheckAllList childRef={childRef1} title='Companies' options = {['Stream Flare', 'Kloudbound', 'Soundpatrol']} /></div>\n          <div><CheckAllList childRef={childRef2} title='Roles' options = {['Data Science', 'Data Engineering', 'Developer']} /></div>\n        </div>\n        <div className=\"btnWrapper\">\n          <button className=\"btn\">Cancel</button>\n          <button className=\"btn primary-btn\" onClick={submitForm}>Apply Filter</button>\n        </div>  \n      </div>\n    );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}